<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Nodejs_相关问题记录</title>
      <link href="/2023/02/21/nodejs-xiang-guan-wen-ti-ji-lu/"/>
      <url>/2023/02/21/nodejs-xiang-guan-wen-ti-ji-lu/</url>
      
        <content type="html"><![CDATA[<h1 id="Nodejs"><a href="#Nodejs" class="headerlink" title="Nodejs"></a>Nodejs</h1><p>记录在nodejs学习过程中遇到的一些难点、易混点</p><h3 id="1-subprocess-kill-signal"><a href="#1-subprocess-kill-signal" class="headerlink" title="1.subprocess.kill([signal])"></a>1.subprocess.kill([signal])</h3><p><strong>业务场景</strong>: 当需要手动杀死子进程且需要在子进程的exit事件中区分是否是手动关闭</p><p><strong>采取的方案</strong>：使用kill([signal])携带信号的形式，预期在exit的回调中获取到signal，用来标识</p><p><strong>遇到的问题</strong>：携带的signal为‘SININT’,结果并未在exit回调中获取到对应signal，‘SINKILL’符合预期</p><p><strong>结论</strong>：<span class="github-emoji"><span>😄</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>当传递SIGINT信号时，子进程的exit中获取不到SIGINT，这是因为SIGINT信号的特性，当子进程收到SIGINT信号时，会尝试终止它的执行，但是它可以被捕捉并执行某些操作，而传递SIGKILL信号后，子进程就无法捕捉到这个信号，所以会立即终止它的执行，导致子进程exit事件中能够获取到SIGKILL信号。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token punctuation">{</span> spawn <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'node:child_process'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> grep <span class="token operator">=</span> <span class="token function">spawn</span><span class="token punctuation">(</span><span class="token string">'grep'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'ssh'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>grep<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'exit'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>code<span class="token punctuation">,</span> signal<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>code<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">----</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>signal<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Send SIGHUP to process.</span>grep<span class="token punctuation">.</span><span class="token function">kill</span><span class="token punctuation">(</span><span class="token string">'SIGINT'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// code: 1  signal: null</span>grep<span class="token punctuation">.</span><span class="token function">kill</span><span class="token punctuation">(</span><span class="token string">'SIGKILL'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// code: null  signal: SIGKILL</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node </tag>
            
            <tag> difficulty </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>组件_AuchorMenu</title>
      <link href="/2023/02/19/auchormenu/"/>
      <url>/2023/02/19/auchormenu/</url>
      
        <content type="html"><![CDATA[<h1 id="AuchorMenu组件"><a href="#AuchorMenu组件" class="headerlink" title="AuchorMenu组件"></a>AuchorMenu组件</h1><p>可适用场景布局分为两个部分，内容区域和锚点区域，内容区域可上下滚动，同时影响锚点目标区域高亮，锚点区域可点击，影响内容区域滚动到指定区域</p><h3 id="组件代码"><a href="#组件代码" class="headerlink" title="组件代码"></a>组件代码</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useEffect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> Affix <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'antd'</span><span class="token punctuation">;</span><span class="token keyword">import</span> styles <span class="token keyword">from</span> <span class="token string">'./index.less'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">Anchormenu</span><span class="token punctuation">(</span>props<span class="token punctuation">:</span> <span class="token punctuation">{</span>  menu<span class="token punctuation">:</span> <span class="token punctuation">{</span> label<span class="token punctuation">:</span> string<span class="token punctuation">;</span> value<span class="token punctuation">:</span> string <span class="token punctuation">}</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  targetId<span class="token punctuation">:</span> string<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> handelScroll <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 不通设备或浏览器版本scrollTop 可能会出现浮点数，而元素的offsetTop肯定是整数，浮点数的一点差距可能会影响下面的判断，因此做兼容处理向上取整</span>    <span class="token keyword">const</span> targetArea <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>targetId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> scrollTop <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span>targetArea<span class="token operator">?</span><span class="token punctuation">.</span>scrollTop <span class="token keyword">as</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> li_list <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`ul.</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>styles<span class="token punctuation">.</span>anchor<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> > li`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> props<span class="token punctuation">.</span>menu<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> eleOffsetTop <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span>        props<span class="token punctuation">.</span>menu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">.</span>offsetTop<span class="token punctuation">;</span>      <span class="token keyword">let</span> nextEleOffsetTop <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> props<span class="token punctuation">.</span>menu<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        nextEleOffsetTop <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span>          props<span class="token punctuation">.</span>menu<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">.</span>offsetTop<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>scrollTop <span class="token operator">&lt;</span> nextEleOffsetTop<span class="token punctuation">)</span> <span class="token punctuation">{</span>            li_list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> el<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>styles<span class="token punctuation">.</span>active<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            li_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>styles<span class="token punctuation">.</span>active<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>eleOffsetTop <span class="token operator">&lt;=</span> scrollTop <span class="token operator">&amp;&amp;</span> scrollTop <span class="token operator">&lt;</span> nextEleOffsetTop<span class="token punctuation">)</span> <span class="token punctuation">{</span>            li_list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> el<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>styles<span class="token punctuation">.</span>active<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            li_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>styles<span class="token punctuation">.</span>active<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>eleOffsetTop <span class="token operator">&lt;=</span> scrollTop<span class="token punctuation">)</span> <span class="token punctuation">{</span>          li_list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> el<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>styles<span class="token punctuation">.</span>active<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          li_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>styles<span class="token punctuation">.</span>active<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> targetArea <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>targetId<span class="token punctuation">)</span><span class="token punctuation">;</span>    targetArea<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'scroll'</span><span class="token punctuation">,</span> handelScroll<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      targetArea<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">'scroll'</span><span class="token punctuation">,</span> handelScroll<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> targetScroll <span class="token operator">=</span> <span class="token punctuation">(</span>target<span class="token punctuation">:</span> string<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> targetEle <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> targetArea <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>targetId<span class="token punctuation">)</span><span class="token punctuation">;</span>    targetArea<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">scrollTo</span><span class="token punctuation">(</span><span class="token punctuation">{</span> top<span class="token punctuation">:</span> targetEle<span class="token operator">!</span><span class="token punctuation">.</span>offsetTop<span class="token punctuation">,</span> behavior<span class="token punctuation">:</span> <span class="token string">'smooth'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>Affix<span class="token operator">></span>      <span class="token operator">&lt;</span>ul        style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>          width<span class="token punctuation">:</span> <span class="token number">14</span><span class="token punctuation">,</span>          position<span class="token punctuation">:</span> <span class="token string">'absolute'</span><span class="token punctuation">,</span>          right<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span>          top<span class="token punctuation">:</span> <span class="token number">8</span><span class="token punctuation">,</span>          textAlign<span class="token punctuation">:</span> <span class="token string">'center'</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span>      <span class="token operator">></span>        <span class="token punctuation">{</span>props<span class="token operator">?</span><span class="token punctuation">.</span>menu<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span>              <span class="token operator">&lt;</span>li                onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">targetScroll</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">}</span>                className<span class="token operator">=</span><span class="token punctuation">{</span>styles<span class="token punctuation">.</span>active<span class="token punctuation">}</span>                key<span class="token operator">=</span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>value<span class="token punctuation">}</span>              <span class="token operator">></span>                <span class="token operator">&lt;</span>a<span class="token operator">></span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>label<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>              <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>            <span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token keyword">return</span> <span class="token punctuation">(</span>            <span class="token operator">&lt;</span>li              key<span class="token operator">=</span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>value<span class="token punctuation">}</span>              onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                <span class="token function">targetScroll</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span><span class="token punctuation">}</span>            <span class="token operator">></span>              <span class="token operator">&lt;</span>a<span class="token operator">></span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>label<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>          <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span>      <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>Affix<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="样式代码"><a href="#样式代码" class="headerlink" title="样式代码"></a>样式代码</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">.</span>anchor <span class="token punctuation">{</span>  margin<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  padding<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  list<span class="token operator">-</span>style<span class="token punctuation">:</span> none<span class="token punctuation">;</span>  li <span class="token punctuation">{</span>    height<span class="token punctuation">:</span> 17px<span class="token punctuation">;</span>    line<span class="token operator">-</span>height<span class="token punctuation">:</span> 17px<span class="token punctuation">;</span>    font<span class="token operator">-</span>size<span class="token punctuation">:</span> 12px<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  a <span class="token punctuation">{</span>    color<span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token operator">/</span> <span class="token number">65</span><span class="token operator">%</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">.</span>anchor <span class="token punctuation">.</span>active <span class="token punctuation">{</span>  a <span class="token punctuation">{</span>    color<span class="token punctuation">:</span> #3751ff<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> react </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> Component </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello React day2</title>
      <link href="/2022/01/24/react-day-two-tidying-up/"/>
      <url>/2022/01/24/react-day-two-tidying-up/</url>
      
        <content type="html"><![CDATA[<p>学习React基础的第一天 </p><h2 id="Day-two"><a href="#Day-two" class="headerlink" title="Day two"></a>Day two</h2><h3 id="1-组件实例的三大核心属性-1：State"><a href="#1-组件实例的三大核心属性-1：State" class="headerlink" title="1.组件实例的三大核心属性 1：State"></a><strong>1.组件实例的三大核心属性</strong> 1：State</h3><ul><li> <strong>state（做状态管理的）</strong></li></ul><pre class=" language-javascript"><code class="language-javascript"> <span class="token keyword">class</span> <span class="token class-name">Weather</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>            <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//不一定要写</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span> isHot<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">//当state里面的数据更新时，会重新调用render方法</span>            <span class="token punctuation">}</span>            <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">const</span> <span class="token punctuation">{</span> isHot <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state                <span class="token keyword">return</span> <span class="token operator">&lt;</span>h2<span class="token operator">></span>今天天气真<span class="token punctuation">{</span>isHot <span class="token operator">?</span> <span class="token string">'炎热'</span> <span class="token punctuation">:</span> <span class="token string">'凉快'</span><span class="token punctuation">}</span>呀<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>Weather <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#test'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h3 id="2-React中的事件绑定"><a href="#2-React中的事件绑定" class="headerlink" title="2.React中的事件绑定"></a><strong>2.React中的事件绑定</strong></h3><pre class=" language-javascript"><code class="language-javascript">        <span class="token keyword">class</span> <span class="token class-name">Weather</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>            <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span> isHot<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//react解析到组件的时候发现是class组件，就会去new这个class，让这个实例去调用render方法 所以render this指向这个类</span>            <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">const</span> <span class="token punctuation">{</span> isHot <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state                <span class="token comment" spellcheck="true">//推荐行内的事件绑定，但是注意写法格式 含义为将demo这个函数作为onClick事件的回调，当你点击的时候，React会帮你执行   onClick={demo()}这种形式的话，React解析到这里的时候会直接会调用这个函数拿到这个函数的返回值给onClick</span>                <span class="token keyword">return</span> <span class="token operator">&lt;</span>h2 id<span class="token operator">=</span><span class="token string">"title"</span> onClick<span class="token operator">=</span><span class="token punctuation">{</span>demo<span class="token punctuation">}</span><span class="token operator">></span>今天天气真<span class="token punctuation">{</span>isHot <span class="token operator">?</span> <span class="token string">'炎热'</span> <span class="token punctuation">:</span> <span class="token string">'凉快'</span><span class="token punctuation">}</span>呀<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>Weather <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#test'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">function</span> <span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">111111</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>，  </code></pre><h3 id="3-类里面的注意点"><a href="#3-类里面的注意点" class="headerlink" title="3.类里面的注意点"></a>3.类里面的注意点</h3><ul><li>类里面的方法会默认在局部开启严格模式！！！</li><li>类里面是可以直接写类似 a = 1,   fn = () =&gt; {}  这样的赋值语句的，他们会作为实例自身的方法或属性存在，不在构造函数的原型对象上</li></ul><p>4.类中方法的this</p><pre class=" language-javascript"><code class="language-javascript">       <span class="token keyword">class</span> <span class="token class-name">Weather</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>            <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span> isHot<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//</span>                <span class="token keyword">const</span> <span class="token punctuation">{</span> isHot <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state                <span class="token keyword">return</span> <span class="token operator">&lt;</span>h2 id<span class="token operator">=</span><span class="token string">"title"</span> onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>demo<span class="token punctuation">}</span><span class="token operator">></span>今天天气真<span class="token punctuation">{</span>isHot <span class="token operator">?</span> <span class="token string">'炎热'</span> <span class="token punctuation">:</span> <span class="token string">'凉快'</span><span class="token punctuation">}</span>呀<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>            <span class="token punctuation">}</span>            <span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//dmeo是放在Demo类的原型上的</span>                <span class="token comment" spellcheck="true">//由于demo是作为onClick的回调，所以不是通过实例调用的，是直接调用</span>                <span class="token comment" spellcheck="true">//类中·方法默认开启了局部的严格的模式，所以demo中的this为undefined</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//undefined</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>Weather <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#test'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h3 id="5-使用bind方法实现state状态更新步骤"><a href="#5-使用bind方法实现state状态更新步骤" class="headerlink" title="5.使用bind方法实现state状态更新步骤"></a>5.使用bind方法实现state状态更新步骤</h3><pre class=" language-javascript"><code class="language-javascript">   <span class="token comment" spellcheck="true">//定义一个展示天气情况的组件</span>        <span class="token keyword">class</span> <span class="token class-name">Weather</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//constructor只调用一次</span>            <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span> isHot<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">//解决demo中的this指向问题</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>demo <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>demo<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 调用 1+n次</span>            <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//</span>                <span class="token keyword">const</span> <span class="token punctuation">{</span> isHot <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state                <span class="token comment" spellcheck="true">//调用的时候是普通调用  但是这个时候调用的函数是绑定在实例身上的方法，不是原型上的方法，而且已经用bind改变了this的指向了，</span>                <span class="token comment" spellcheck="true">//换句话说就是这个实力上的方法始终指向的是这个实例</span>                <span class="token keyword">return</span> <span class="token operator">&lt;</span>h2 id<span class="token operator">=</span><span class="token string">"title"</span> onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>demo<span class="token punctuation">}</span><span class="token operator">></span>今天天气真<span class="token punctuation">{</span>isHot <span class="token operator">?</span> <span class="token string">'炎热'</span> <span class="token punctuation">:</span> <span class="token string">'凉快'</span><span class="token punctuation">}</span>呀<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//点几次就调用几次</span>            <span class="token comment" spellcheck="true">//这个方法在构造函数的原型对象上</span>            <span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//开启了严格模式</span>                <span class="token keyword">const</span> ishot <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>isHot                <span class="token comment" spellcheck="true">//严重注意状态(state)不可以直接更改，必须要通过settate方法修改</span>                <span class="token comment" spellcheck="true">//这个setState方法是来自React.Component这个类上的 是一种合并，不是替换！！！！</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> isHot<span class="token punctuation">:</span> <span class="token operator">!</span>ishot <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>Weather <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#test'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h3 id="6-精简版实现state状态更新"><a href="#6-精简版实现state状态更新" class="headerlink" title="6.精简版实现state状态更新"></a>6.精简版实现state状态更新</h3><pre class=" language-javascript"><code class="language-javascript">        <span class="token keyword">class</span> <span class="token class-name">Weather</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>            state <span class="token operator">=</span> <span class="token punctuation">{</span> isHot<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//直接以赋值的形式写在class中是作为实例的一个属性的</span>            <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//this指向的也是实例化对象</span>                <span class="token keyword">const</span> <span class="token punctuation">{</span> isHot <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state                <span class="token keyword">return</span> <span class="token operator">&lt;</span>h2 id<span class="token operator">=</span><span class="token string">"title"</span> onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>demo<span class="token punctuation">}</span><span class="token operator">></span>今天天气真<span class="token punctuation">{</span>isHot <span class="token operator">?</span> <span class="token string">'炎热'</span> <span class="token punctuation">:</span> <span class="token string">'凉快'</span><span class="token punctuation">}</span>呀<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>            <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//以赋值的方式去写，是作为实例的一个方法，不是在对象原型上，而且因为是箭头函数，中的this指向的是自己的上下文（父级），也就是实例化对象，所以就不需要bind在demo方法中可以直接使用this就是实例化对象</span>            demo <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                <span class="token keyword">const</span> ishot <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>isHot                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> isHot<span class="token punctuation">:</span> <span class="token operator">!</span>ishot <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>Weather <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#test'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h3 id="7-组件实例三大核心组件-2：props"><a href="#7-组件实例三大核心组件-2：props" class="headerlink" title="7.组件实例三大核心组件 2：props"></a>7.组件实例三大核心组件 2：props</h3><pre class=" language-javascript"><code class="language-javascript">  <span class="token keyword">class</span> <span class="token class-name">List</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>        <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">const</span> <span class="token punctuation">{</span> name<span class="token punctuation">,</span> sex<span class="token punctuation">,</span> age <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props                <span class="token keyword">return</span> <span class="token punctuation">(</span>                    <span class="token operator">&lt;</span>ul<span class="token operator">></span>                        <span class="token operator">&lt;</span>li<span class="token operator">></span>姓名<span class="token punctuation">:</span> <span class="token punctuation">{</span>name<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>                        <span class="token operator">&lt;</span>li<span class="token operator">></span>性别<span class="token punctuation">:</span> <span class="token punctuation">{</span>sex<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>                        <span class="token operator">&lt;</span>li<span class="token operator">></span>年龄<span class="token punctuation">:</span> <span class="token punctuation">{</span>age<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>                    <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span>                <span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// ReactDOM.render(&lt;List name="Tom" sex="女" age="18" />, document.querySelector('#test1'))</span>        <span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">"jerry"</span><span class="token punctuation">,</span> sex<span class="token punctuation">:</span> <span class="token string">"男"</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token string">"20"</span> <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//注意这里的{...obj} 外层的{}表示里面是一个js表达式，里面的...不是拓展运算符！！！</span>        <span class="token comment" spellcheck="true">//是react加上babel才可可以使用的语法糖 </span>        <span class="token comment" spellcheck="true">//批量传递标签属性</span>        ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>List <span class="token punctuation">{</span><span class="token operator">...</span>obj<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#test2'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h3 id="8-…-的注意点"><a href="#8-…-的注意点" class="headerlink" title="8.     … 的注意点"></a>8.     … 的注意点</h3><ul><li>在react的props传参位置使用代表的是这里的语法糖，将这个对象转换为注释那里的样子</li><li>js原生中的…分为两种，一种为拓展运算符，一种为剩余参数</li><li>注意对象{}是不可以使用…展开的，因为他没有部署iterator接口</li><li>特殊情况为{…obj},这个表达式的意思为，对象的复制（首层深拷贝），而不是展开！！</li></ul><h3 id="9-对props属性做限制"><a href="#9-对props属性做限制" class="headerlink" title="9.对props属性做限制"></a>9.对props属性做限制</h3><pre class=" language-javascript"><code class="language-javascript">  <span class="token comment" spellcheck="true">//要多导入一个类型限制的包</span><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"./prop-types.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>List<span class="token punctuation">.</span>propTypes <span class="token operator">=</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//大小写区分好</span>            name<span class="token punctuation">:</span> PropTypes<span class="token punctuation">.</span>string<span class="token punctuation">.</span>isRequired<span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//字符且必须</span>            age<span class="token punctuation">:</span> PropTypes<span class="token punctuation">.</span>number<span class="token punctuation">,</span>   <span class="token comment" spellcheck="true">//数字类型</span>            speak<span class="token punctuation">:</span> PropTypes<span class="token punctuation">.</span>func    <span class="token comment" spellcheck="true">//限定为函数类型</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//默认值设置</span>        List<span class="token punctuation">.</span>defaultProps <span class="token operator">=</span> <span class="token punctuation">{</span>            sex<span class="token punctuation">:</span> <span class="token string">'不男不女'</span><span class="token punctuation">,</span>            age<span class="token punctuation">:</span> <span class="token number">18</span>        <span class="token punctuation">}</span>        ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>List name<span class="token operator">=</span><span class="token string">'nihao'</span> sex<span class="token operator">=</span><span class="token string">"女"</span> age<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">18</span><span class="token punctuation">}</span> speak<span class="token operator">=</span><span class="token punctuation">{</span>speak<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#test1'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">function</span> <span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hahaha'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><h3 id="10-constructor的使用注意点"><a href="#10-constructor的使用注意点" class="headerlink" title="10.constructor的使用注意点"></a>10.constructor的使用注意点</h3><ul><li>在 React 组件挂载之前，会调用它的构造函数。在为 React.Component 子类实现构造函数时，应在其他语句之前调用 <code>super(props)</code>。否则在constructor中不用直接使用<code>this.props</code>会出现undefined 的情况</li><li>通常，在 React 中，构造函数仅用于以下两种情况：<ul><li>通过给 <code>this.state</code> 赋值对象来初始化<a href="https://zh-hans.reactjs.org/docs/state-and-lifecycle.html">内部 state</a>。</li><li>为<a href="https://zh-hans.reactjs.org/docs/handling-events.html">事件处理函数</a>绑定实例就是 (  this.demo = this.demo.bind(this)  ) 就是偏函数的一种体现</li></ul></li></ul><h3 id="11-props的简写和注意事项"><a href="#11-props的简写和注意事项" class="headerlink" title="11.props的简写和注意事项"></a>11.props的简写和注意事项</h3><ul><li>因为加限制的propTypes 和 defaultProps 必须加在这个构造函数上</li><li>可以使用static关键字把这两个属性直接写在class中，作为这个类的静态属性，即可实现简写</li><li>组件标签的所有属性都保存在props中</li><li>不要直接修改props的值，会报错，它是一个只读属性</li></ul><h3 id="12-函数组件使用props（利用参数）"><a href="#12-函数组件使用props（利用参数）" class="headerlink" title="12.函数组件使用props（利用参数）"></a>12.函数组件使用props（利用参数）</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//函数组件使用不了状态（state） 和refs   但是用hooks的话就可以使用</span><span class="token keyword">function</span> <span class="token function">Demo</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">//利用了函数可以接收参数的特性接收props</span>            <span class="token keyword">const</span> <span class="token punctuation">{</span> name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> sex <span class="token punctuation">}</span> <span class="token operator">=</span> props            <span class="token keyword">return</span> <span class="token punctuation">(</span>                <span class="token operator">&lt;</span>ul<span class="token operator">></span>                    <span class="token operator">&lt;</span>li<span class="token operator">></span>姓名<span class="token punctuation">:</span> <span class="token punctuation">{</span>name<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>                    <span class="token operator">&lt;</span>li<span class="token operator">></span>性别<span class="token punctuation">:</span> <span class="token punctuation">{</span>sex<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>                    <span class="token operator">&lt;</span>li<span class="token operator">></span>年龄<span class="token punctuation">:</span> <span class="token punctuation">{</span>age <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>                <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span>            <span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//和类中做限制的普通方法一致</span>        Demo<span class="token punctuation">.</span>propTypes <span class="token operator">=</span> <span class="token punctuation">{</span>            name<span class="token punctuation">:</span> PropTypes<span class="token punctuation">.</span>string<span class="token punctuation">.</span>isRequired<span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//字符且必须</span>            age<span class="token punctuation">:</span> PropTypes<span class="token punctuation">.</span>number<span class="token punctuation">,</span>   <span class="token comment" spellcheck="true">//数字类型</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//默认值设置</span>        Demo<span class="token punctuation">.</span>defaultProps <span class="token operator">=</span> <span class="token punctuation">{</span>            sex<span class="token punctuation">:</span> <span class="token string">'不男不女'</span><span class="token punctuation">,</span>            age<span class="token punctuation">:</span> <span class="token number">18</span>        <span class="token punctuation">}</span>        ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>Demo name<span class="token operator">=</span><span class="token string">'nihao'</span> age<span class="token operator">=</span><span class="token string">'18'</span> sex<span class="token operator">=</span><span class="token string">"男"</span> <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#test1'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h3 id="13-ref的使用方式"><a href="#13-ref的使用方式" class="headerlink" title="13.ref的使用方式"></a>13.ref的使用方式</h3><ul><li>字符型  ： 不推荐使用，效率很低（后续可能会丢弃）</li><li>回调函数型：   （推荐使用，官网说了，没啥影响）</li></ul><ol><li>如果 <code>ref</code> 回调函数是以<strong>内联函数</strong>（ref ={(currentNode) =&gt; {this.xxxx = currentNode}}）的方式定义的，在更新过程中（state状态改变，render重新渲染后）它会被执行两次，第一次传入参数 <code>null</code>，然后第二次会传入参数 DOM 元素。这是因为在每次渲染时会创建一个新的函数实例，所以 React 清空旧的 ref 并且设置新的。</li><li>通过将 ref 的回调函数定义成 class的绑定函数的方式可以避免上述问题，但是<strong>大多数情况下它是无关紧要</strong>的。</li></ol><ul><li>React.createRef()   <strong>专人专用</strong>    React.createRef这个函数被调用之后会返回一个<strong>容器</strong>，可以存储被ref标识的节点    </li></ul><h3 id="14-到现在为止用到的几个API"><a href="#14-到现在为止用到的几个API" class="headerlink" title="14.到现在为止用到的几个API"></a>14.到现在为止用到的几个API</h3><ul><li>React.createElement(tag, props, children)   // 可以用来创建虚拟DOM</li><li>ReactDOM.render(VDOM, ‘dom容器’)           // 将虚拟DOM渲染到页面上</li><li>React.createRef()                                               //返回一个可以用来存储被ref标识的节点的容器</li><li>构造函数.propTypes  /  PropTypes(用来做props类型的限制的js文件)  /  构造函数.defaultProps(用来设置默认值的)</li><li>RactDOM.unmountComponentAtNode(node)   //用来销毁一个dom容器中的组件</li><li>this.setState()               //修改状态（状态不能直接修改）</li><li>this.farceUpdate()       //强制更新</li></ul><h3 id="15-React中的事件处理"><a href="#15-React中的事件处理" class="headerlink" title="15.React中的事件处理"></a>15.React中的事件处理</h3><ol><li>通过onXxxx属性指定的事件处理函数（注意大小写）<ul><li>React使用的是自定义（合成）事件（不是原生的DOM事件） —— 为了更好的兼容性</li><li>React中的事件是通过事件委托的方式来处理的（委托给组件最外层的元素）—— 为了更高效</li></ul></li><li>在事件处理函数中可以接收到事件event，通过event.target可以获取到触发事件的那个DOM元素—— 不要过度的使用ref打标识</li></ol><h3 id="16-受控组件于非受控组件"><a href="#16-受控组件于非受控组件" class="headerlink" title="16.受控组件于非受控组件"></a>16.受控组件于非受控组件</h3><ul><li><p>在HTML中，标签<input>、<textarea>、&lt;select&gt;的值的改变通常是根据用户输入进行更新。在React中，可变状态通常保存在组件的&lt;strong&gt;状态属性state&lt;/strong&gt;中，并且只能使用 &lt;strong&gt;setState()&lt;/strong&gt; 更新，而呈现表单的React组件也控制着在后续用户输入时该表单中发生的情况，以这种由React控制的输入表单元素而改变其值的方式，称为：“&lt;strong&gt;受控组件&lt;/strong&gt;”。——-&lt;strong&gt;随着你的输入维护状态就是&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;表单数据由DOM本身处理。即&lt;code&gt;不受setState()&lt;/code&gt;的控制，与传统的HTML表单输入相似，input输入值即显示最新值（&lt;strong&gt;使用 &lt;code&gt;ref&lt;/code&gt;从DOM获取表单值&lt;/strong&gt;）— &lt;strong&gt;现用现取&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 id="17-用函数柯里化实现受控组件的状态更新"&gt;&lt;a href="#17-用函数柯里化实现受控组件的状态更新" class="headerlink" title="17.用函数柯里化实现受控组件的状态更新"&gt;&lt;/a&gt;17.用函数柯里化实现受控组件的状态更新&lt;/h3&gt;&lt;pre&gt;&lt;code class="javascript"&gt;saveData = (dataType) =&gt; {    //通过闭包来保存参数                return (e) =&gt; {                    this.setState({ [dataType]: e.target.value })                }            }.... //注意事件的后面必须是一个参数，才能接收到对应的时间对象 &lt;label&gt;用户名：  &lt;input onChange={this.saveData('username')} type="text" name="username" /&gt;&lt;/label&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id="18-不用函数柯里化实现受控组件的状态更新"&gt;&lt;a href="#18-不用函数柯里化实现受控组件的状态更新" class="headerlink" title="18.不用函数柯里化实现受控组件的状态更新"&gt;&lt;/a&gt;18.不用函数柯里化实现受控组件的状态更新&lt;/h3&gt;&lt;pre&gt;&lt;code class="javascript"&gt;saveData = (dataType, e) =&gt; {                this.setState({ [dataType]: e.target.value })            }//只要保证事件的后面是一个函数就行&lt;label&gt;用户名：  &lt;input onChange={e =&gt; this.saveData('username', e)} type="text" name="username" /&gt;&lt;/label&gt;&lt;/code&gt;&lt;/pre&gt;</textarea></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> react </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> learning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello React day3</title>
      <link href="/2022/01/24/react-day-three-tidying-up/"/>
      <url>/2022/01/24/react-day-three-tidying-up/</url>
      
        <content type="html"><![CDATA[<p>学习React基础的第三天 </p><h2 id="Day-three"><a href="#Day-three" class="headerlink" title="Day three"></a>Day three</h2><h3 id="1-老版本生命周期"><a href="#1-老版本生命周期" class="headerlink" title="1.老版本生命周期"></a>1.老版本生命周期</h3><p>1.初始化阶段：由ReactDOM.render(组件，node)触发—-初次渲染</p><ul><li>constructor()</li><li><strong>componentWillMount()</strong></li><li>render()</li><li>componentDidMount</li></ul><p>2.更新阶段：由组件内部this.setState()或父组件render触发（还有ReactDOM.forceUpdate()强制更新，但是不常用）</p><ul><li>shouldComponentUpdate()  </li><li><strong>componentWillUpdate()</strong></li><li>render()</li><li>componentDidUpdate()</li></ul><p>3.卸载阶段（由ReactDOM.unmountComponentAtNode()触发）</p><ul><li>componentWillUnmount()</li></ul><p>注意：还有一个<strong>componentWillReceiveProps()</strong> //传入一个new props才会被触发</p><h3 id="2-新版本生命周期"><a href="#2-新版本生命周期" class="headerlink" title="2.新版本生命周期"></a>2.新版本生命周期</h3><p>1.初始化阶段   由ReactDOM.render（）触发—初次渲染</p><ul><li>constructor()</li><li><strong>getDerivedStateFromProps(props,state)</strong>      //使用情况当state值完全和props对应的时候（接收两个参数props，state）</li><li>render（）</li><li>componentDidMount（）</li></ul><p>2.更新阶段：由组件内部this.setState()或父组件更新render触发</p><ul><li>**getDerivedStateFromProps(props,state) **      //使用的要当静态方法来用 <strong>前面加 static</strong></li><li>shouldComponentUpdate()</li><li><strong>getSnapshotBeforeUpdate()</strong>    //可以return 快照值    snapshotValue接收</li><li>componentDidUpdate(refvProps,refvState,snapshotValue)</li></ul><p>3.卸载组件 : 由ReactDOM.unmountComponentAtNode()触发</p><ul><li>componentWillUnmount()</li></ul><h3 id="3-重要的钩子"><a href="#3-重要的钩子" class="headerlink" title="3.重要的钩子"></a>3.重要的钩子</h3><ul><li>render()    //初始化渲染或更新渲染用</li><li>componentDidMount()   // 开启监听发送Ajax请求，订阅消息</li><li>componentWillUnmount()   // 做一些收尾工作，清除定时器</li></ul><h3 id="4-18版本中即将废弃的钩子"><a href="#4-18版本中即将废弃的钩子" class="headerlink" title="4.18版本中即将废弃的钩子"></a>4.18版本中即将废弃的钩子</h3><ul><li>componentWillMount()</li><li>componentWillReceiveProps()</li><li>componentWillUpdate()</li></ul><p>注意：在新版本使用要加UNSAFE_前缀才能使用（之后可能就废弃啦）不然会报警告</p><h3 id="5-虚拟DOM与DOM-diffing（diff）"><a href="#5-虚拟DOM与DOM-diffing（diff）" class="headerlink" title="5.虚拟DOM与DOM diffing（diff）"></a>5.虚拟DOM与DOM diffing（diff）</h3><ul><li><strong>虚拟DOM中key的作用：</strong></li></ul><ol><li>简单地说：key是虚拟DOM对象的标识，在更新显示时key起着及其重要的作用。</li><li>详细的说：“当状态中的数据发生变化时，React会根据【新数据】生成【新得虚拟DOM】”</li></ol><p>​                           随后React进行【新的虚拟DOM】与【旧的虚拟DOM】做diff比较，比较规则如下：</p><p>​                        a.旧虚拟DOM中找到了与新虚拟DOM相同的key              </p><p>​                               （1）若虚拟DOM内容没有改变，直接使用之前的真实DOM</p><p>​                               （2）若虚拟DOM中内容变了，则生成新得真实DOM，随后替换掉页面中之前的真实dom</p><p>​                        b.旧的虚拟DOM中未找到与新得虚拟DOM相同的key</p><p>​                               （1）根据新得数据创建新得真实DOM，随后渲染到页面上  </p><ul><li><strong>用index作为key可能会引发的问题</strong></li></ul><ol><li> 若对数组进行：逆序添加、逆序删除等破坏顺序的操作：会产生没有必要的真实DOM更新 ==》界面效果没有问题，但是效率太低</li><li> 如果结构中还存在输入类的DOM ： 会产生错误的DOM更新 ==》界面有问题</li><li>注意：如果不存在对数据的逆序添加、删除等操作的时候 ==》 仅仅用于渲染列表用于展示，使用index作为key是没有问题的</li></ol><ul><li>开发中何如选择key？</li></ul><ol><li>最好还是使用每一条数据的唯一标识作为key</li><li>如果确定只是简单的展示数据，用index也是可以的</li></ol><p>​                 </p>]]></content>
      
      
      <categories>
          
          <category> react </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> learning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello React day4</title>
      <link href="/2022/01/24/react-day-four-tidying-up/"/>
      <url>/2022/01/24/react-day-four-tidying-up/</url>
      
        <content type="html"><![CDATA[<p>学习React基础的第四天 </p><h2 id="Day-four"><a href="#Day-four" class="headerlink" title="Day four"></a>Day four</h2><h3 id="1-样式的模块化"><a href="#1-样式的模块化" class="headerlink" title="1.样式的模块化"></a>1.样式的模块化</h3><ul><li>index.css  ==&gt; index.module.css</li><li>import  ‘./index.css’  ==&gt; import  xxx  from ‘./index.module.css’</li><li>使用的时候直接className = “xxx.类名”</li></ul><h3 id="2-功能组件的编码流程"><a href="#2-功能组件的编码流程" class="headerlink" title="2.功能组件的编码流程"></a>2.功能组件的编码流程</h3><ol><li>拆分组件: 拆分界面,抽取组件</li><li>实现静态组件: 使用组件实现静态页面效果</li><li>实现动态组件</li></ol><ul><li><p> 3.1动态显示初始化数据</p></li><li><p>3.1.1 数据类型</p></li><li><p>3.1.2 数据名称</p></li><li><p>3.1.2 保存在哪个组件?                    </p></li><li><p>3.2 交互(从绑定事件监听开始)        </p></li></ul><h3 id="3-todoList的相关知识点"><a href="#3-todoList的相关知识点" class="headerlink" title="3.todoList的相关知识点"></a>3.todoList的相关知识点</h3><ol><li>拆分组件、实现静态组件， 注意：className、style的写法！！！！</li><li>动态初始化列表，如何确定将数据放在哪个组件的state中？</li></ol><p>​                  ——某个组件使用，放在自身的state中</p><p>​                  ——某些组件使用，放在他们共同的父组件state中（官方说法：状态提升）</p><p>​    3.关于父子组件中的通信</p><p>​                    ——【父组件】给【子组件】传递数据，通过props传递</p><p>​                    ——【子组件】给【父组件】传递数据，通过props传递，要求父组件提前给子组件传递了一个函数</p><p>​    4.注意defaultChecked和 checked的区别， 类似的还有defaultValue 和 value</p><p>​    5.状态在哪里，操作状态的方法就在哪里</p>]]></content>
      
      
      <categories>
          
          <category> react </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> learning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello React day5</title>
      <link href="/2022/01/24/react-day-five-tidying-up/"/>
      <url>/2022/01/24/react-day-five-tidying-up/</url>
      
        <content type="html"><![CDATA[<p>Welcome </p><h3 id="1-PubSubJs-消息的发布与订阅"><a href="#1-PubSubJs-消息的发布与订阅" class="headerlink" title="1.PubSubJs(消息的发布与订阅)"></a>1.PubSubJs(消息的发布与订阅)</h3><pre class=" language-javascript"><code class="language-javascript">安装： npm install pubsub<span class="token operator">-</span>js使用： <span class="token keyword">import</span> PubSub <span class="token keyword">from</span> <span class="token string">'pubsub-js'</span><span class="token comment" spellcheck="true">//注意这里的callback接收的第一个参数为订阅的消息名！！！</span>订阅： <span class="token keyword">let</span> token <span class="token operator">=</span> PubSub<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token string">'MY TOPIC'</span><span class="token punctuation">,</span> callback<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//第一个参数为消息名，后面参数为传递的值</span>发布： PubSub<span class="token punctuation">.</span><span class="token function">publish</span><span class="token punctuation">(</span><span class="token string">'MY TOPIC'</span><span class="token punctuation">,</span> <span class="token string">'hello world!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//取消类似定时器的取消</span>取消： PubSub<span class="token punctuation">.</span><span class="token function">unsubscribe</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="2-fetch的基本用法-优化写法"><a href="#2-fetch的基本用法-优化写法" class="headerlink" title="2.fetch的基本用法(优化写法)"></a>2.fetch的基本用法(优化写法)</h3><pre class=" language-javascript"><code class="language-javascript">    <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`https://api.github.com/search/users?q=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span>              <span class="token comment" spellcheck="true">//返回的是一个Promise 通过await拿到结果是一个response对象</span>            <span class="token comment" spellcheck="true">//数据在这个对象的response.json()方法中，但是这个也是一个promise</span>            <span class="token comment" spellcheck="true">//再次使用await，这样得到的就是那个数据对象</span>            <span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token keyword">await</span> result<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span>               PubSub<span class="token punctuation">.</span><span class="token function">publish</span><span class="token punctuation">(</span><span class="token string">'changeState'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> mainValue<span class="token punctuation">:</span> data<span class="token punctuation">.</span>items<span class="token punctuation">,</span> loading<span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            PubSub<span class="token punctuation">.</span><span class="token function">publish</span><span class="token punctuation">(</span><span class="token string">'changeState'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> loading<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> err<span class="token punctuation">:</span> error<span class="token punctuation">.</span>message <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span></code></pre><ul><li>fetch原生函数（存在兼容性问题）与XmlHttpRequest属于同级</li><li>axios，jq中的$ajax都是基于xmlHttpRequest封装的</li></ul><h3 id="3-对象解构赋值"><a href="#3-对象解构赋值" class="headerlink" title="3.对象解构赋值"></a>3.对象解构赋值</h3><pre><code>let obj = {a:{b:123}cosnt {a} = obj  //普通解构cosnt {a:{b}} = obj // 深度解构cosnt {a:{b:value}} = obj  //深度解构加重命名</code></pre><h3 id="4-react-router-dom的基本使用"><a href="#4-react-router-dom的基本使用" class="headerlink" title="4.react-router-dom的基本使用"></a>4.react-router-dom的基本使用</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> Link<span class="token punctuation">,</span>Route<span class="token punctuation">,</span>Routes <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react-router-dom"</span><span class="token number">1</span><span class="token punctuation">.</span>明确好界面中的导航区、展示区<span class="token number">2</span><span class="token punctuation">.</span>导航区的a标签改为Link标签<span class="token operator">&lt;</span>Link className<span class="token operator">=</span><span class="token string">"xxxx"</span> to<span class="token operator">=</span><span class="token string">'/about'</span><span class="token operator">></span>yyyy<span class="token operator">&lt;</span><span class="token operator">/</span>Link<span class="token operator">></span><span class="token number">3</span><span class="token punctuation">.</span>展示区写Routes和Route标签进行路由的匹配<span class="token comment" spellcheck="true">//新版本写法</span><span class="token operator">&lt;</span>Routes<span class="token operator">></span>    <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">'/about'</span> element<span class="token operator">=</span><span class="token punctuation">{</span><span class="token operator">&lt;</span>About <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">'/home'</span> element<span class="token operator">=</span><span class="token punctuation">{</span><span class="token operator">&lt;</span>Home <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Routes<span class="token operator">></span><span class="token comment" spellcheck="true">//app.js </span><span class="token keyword">import</span> <span class="token punctuation">{</span>BrowserRouter <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react-router-dom"</span><span class="token number">4</span><span class="token punctuation">.</span>app的最外层包裹一个 <span class="token operator">&lt;</span>BrowserRouter<span class="token operator">></span> 或者<span class="token operator">&lt;</span>HashBrowser<span class="token operator">></span></code></pre><h3 id="5-路由组件与一般组件"><a href="#5-路由组件与一般组件" class="headerlink" title="5.路由组件与一般组件"></a>5.路由组件与一般组件</h3><p>​      1.写法不同</p><p>​             一般组件：<demo></demo></p><p>​            路由组件：&lt;*Route* path=’/about’ component={Demo} /&gt;</p><p>​      2.存放位置不同</p><p>​       一般组件：存放在components文件夹下</p><p>​            路由组件：存放在pages文件夹下    </p><p>​      3.接收到的props不同</p><p>​        一般组件：写标签时传入了什么，就接受到了什么</p><p>​        路由组件：接收到三个固定的属性</p><pre class=" language-javascript"><code class="language-javascript">history<span class="token punctuation">:</span>        go<span class="token punctuation">:</span> ƒ <span class="token function">go</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>        goBack<span class="token punctuation">:</span> ƒ <span class="token function">goBack</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        goForward<span class="token punctuation">:</span> ƒ <span class="token function">goForward</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        push<span class="token punctuation">:</span> ƒ <span class="token function">push</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> state<span class="token punctuation">)</span>        replace<span class="token punctuation">:</span> ƒ <span class="token function">replace</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> state<span class="token punctuation">)</span>location<span class="token punctuation">:</span>        pathname<span class="token punctuation">:</span> <span class="token string">"/about"</span>        search<span class="token punctuation">:</span> <span class="token string">""</span>        state<span class="token punctuation">:</span> undefinedmatch<span class="token punctuation">:</span>        params<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        path<span class="token punctuation">:</span> <span class="token string">"/about"</span>        url<span class="token punctuation">:</span> <span class="token string">"/about"</span></code></pre><h3 id="6-组件实例中的children属性"><a href="#6-组件实例中的children属性" class="headerlink" title="6.组件实例中的children属性"></a>6.组件实例中的children属性</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>MyNavLink to<span class="token operator">=</span><span class="token string">'/about'</span> children<span class="token operator">=</span><span class="token string">"About"</span> <span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span>MyNavLink to<span class="token operator">=</span><span class="token string">'/home'</span> children<span class="token operator">=</span><span class="token string">"Home"</span> <span class="token operator">/</span><span class="token operator">></span><span class="token comment" spellcheck="true">//这两种方式是等价的   组件标签中的内容，其实就是作为组件实例上的children属性进行传递的的</span><span class="token comment" spellcheck="true">//在组件内部的props可以接收到</span><span class="token operator">&lt;</span>MyNavLink to<span class="token operator">=</span><span class="token string">'/about'</span> <span class="token operator">></span>About<span class="token operator">&lt;</span><span class="token operator">/</span>MyNavLink<span class="token operator">></span><span class="token operator">&lt;</span>MyNavLink to<span class="token operator">=</span><span class="token string">'/home'</span> <span class="token operator">></span>Home<span class="token operator">&lt;</span><span class="token operator">/</span>MyNavLink<span class="token operator">></span></code></pre><h3 id="7-Switch的使用"><a href="#7-Switch的使用" class="headerlink" title="7.Switch的使用"></a>7.Switch的使用</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//像这种同一个路径匹配了多个组件的时候，对应的组件都会展示</span><span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">'/about'</span> component<span class="token operator">=</span><span class="token punctuation">{</span>About<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">'/home'</span> component<span class="token operator">=</span><span class="token punctuation">{</span>Home<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>               <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">'/home'</span> component<span class="token operator">=</span><span class="token punctuation">{</span>Dmeo<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span> <span class="token comment" spellcheck="true">//import {Switch} from 'react-router-dom'</span><span class="token comment" spellcheck="true">//加了Switch组件以后，就会提高性能，只要匹配到对应的路径就不会在匹配其它的了</span><span class="token operator">&lt;</span>Switch<span class="token operator">></span>          <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">'/about'</span> component<span class="token operator">=</span><span class="token punctuation">{</span>About<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>          <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">'/home'</span> component<span class="token operator">=</span><span class="token punctuation">{</span>Home<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>                         <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">'/home'</span> component<span class="token operator">=</span><span class="token punctuation">{</span>Dmeo<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>     <span class="token operator">&lt;</span><span class="token operator">/</span>Switch<span class="token operator">></span>  </code></pre><h3 id="8-解决样式丢失的方法"><a href="#8-解决样式丢失的方法" class="headerlink" title="8.解决样式丢失的方法"></a>8.解决样式丢失的方法</h3><ul><li>在用react脚手架运行项目的时候，本地开启的服务器会把public作为根目录</li><li>如果请求路径拿不到资源时，会默认把index.html页面展示出来</li><li>在<browserrouter>造成路径丢失的原因</browserrouter></li></ul><pre class=" language-js"><code class="language-js">http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token punctuation">:</span><span class="token number">3000</span><span class="token operator">/</span>home   <span class="token comment" spellcheck="true">//在这种路径下会以这种路径去正确的请求css样式表</span>Request URL<span class="token punctuation">:</span> http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token punctuation">:</span><span class="token number">3000</span><span class="token operator">/</span>css<span class="token operator">/</span>bootstrap<span class="token punctuation">.</span>csshttp<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token punctuation">:</span><span class="token number">3000</span><span class="token operator">/</span>home<span class="token operator">/</span>aa<span class="token operator">/</span>bb<span class="token comment" spellcheck="true">//在这种路径下会以这种路径去错误的请求css样式表（会返回给你一个index.html，因为匹配不到结果）</span>Request URL<span class="token punctuation">:</span> http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token punctuation">:</span><span class="token number">3000</span><span class="token operator">/</span>home<span class="token operator">/</span>aa<span class="token operator">/</span>css<span class="token operator">/</span>bootstrap<span class="token punctuation">.</span>css</code></pre><ul><li>三种解决办法</li></ul><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>link rel<span class="token operator">=</span><span class="token string">"stylesheet"</span> href<span class="token operator">=</span><span class="token string">"./css/bootstrap.css"</span><span class="token operator">></span><span class="token comment" spellcheck="true">//第一种  把点去掉</span><span class="token operator">&lt;</span>link rel<span class="token operator">=</span><span class="token string">"stylesheet"</span> href<span class="token operator">=</span><span class="token string">"/css/bootstrap.css"</span><span class="token operator">></span><span class="token comment" spellcheck="true">//第二种  %PUBLIC_URL% </span><span class="token operator">&lt;</span>link rel<span class="token operator">=</span><span class="token string">"stylesheet"</span> href<span class="token operator">=</span><span class="token string">" %PUBLIC_URL%/css/bootstrap.css"</span><span class="token operator">></span><span class="token comment" spellcheck="true">//第三种 采用&lt;HashRouter>模式而不是&lt;BrowserRouter>模式</span>http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token punctuation">:</span><span class="token number">3000</span><span class="token operator">/</span>#<span class="token operator">/</span>home<span class="token operator">/</span>asasas   <span class="token comment" spellcheck="true">//会自动的忽略掉#后面的路径，不加在请求的url地址中</span>Request URL<span class="token punctuation">:</span> http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token punctuation">:</span><span class="token number">3000</span><span class="token operator">/</span>css<span class="token operator">/</span>bootstrap<span class="token punctuation">.</span>css</code></pre><h3 id="9-严格匹配和模糊匹配"><a href="#9-严格匹配和模糊匹配" class="headerlink" title="9.严格匹配和模糊匹配"></a>9.严格匹配和模糊匹配</h3><ul><li>react-router-dom的默认匹配模式就是模糊匹配</li></ul><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//默认的模糊匹配这样子也不会报错，能正确展示</span><span class="token operator">&lt;</span>MyNavLink to<span class="token operator">=</span><span class="token string">'/home/a/b'</span> <span class="token operator">></span>Home<span class="token operator">&lt;</span><span class="token operator">/</span>MyNavLink<span class="token operator">></span><span class="token operator">&lt;</span>Switch<span class="token operator">></span>      <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">'/home'</span> component<span class="token operator">=</span><span class="token punctuation">{</span>Home<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>                    <span class="token operator">&lt;</span><span class="token operator">/</span>Switch<span class="token operator">></span> </code></pre><ul><li>给展示区域的路由组件上加 exact属性 （exact={ true} / exact)    //这样就只能进行严格匹配，能不用就不用</li></ul><h3 id="🍋-10-重定向路由"><a href="#🍋-10-重定向路由" class="headerlink" title="🍋 10. 重定向路由"></a>🍋 10. 重定向路由</h3><p>在我们写好了这些之后，我们会发现，我们需要点击任意一个按钮，才会去匹配一个组件，这并不是我们想要的，我们想要页面一加载上来，默认的就能匹配到一个组件。</p><p>这个时候我们就需要时候 Redirecrt 进行默认匹配了。</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>Redirect to<span class="token operator">=</span><span class="token string">"/home"</span> <span class="token operator">/</span><span class="token operator">></span></code></pre><p>当我们加上这条语句时，页面找不到指定路径时，就会重定向到 <code>/home</code> 页面下因此当我们请求3000端口时，就会重定向到 <code>/home</code> 这样就能够实现我们想要的效果了</p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/image-20210904013342960.png" alt="image-20210904013342960"></p><h3 id="🍓11-嵌套路由"><a href="#🍓11-嵌套路由" class="headerlink" title="🍓11. 嵌套路由"></a>🍓11. 嵌套路由</h3><p>嵌套路由也就是我们前面有提及的二级路由，但是嵌套路由包括了二级、三级…还有很多级路由，当我们需要在一个路由组件中添加两个组件，一个是头部，一个是内容区</p><p>我们将我们的嵌套内容写在相应的组件里面，这个是在 Home 组件的 return 内容</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>h2<span class="token operator">></span>Home组件内容<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>ul className<span class="token operator">=</span><span class="token string">"nav nav-tabs"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>li<span class="token operator">></span>                <span class="token operator">&lt;</span>MyNavLink className<span class="token operator">=</span><span class="token string">"list-group-item"</span> to<span class="token operator">=</span><span class="token string">"/home/news"</span><span class="token operator">></span>News<span class="token operator">&lt;</span><span class="token operator">/</span>MyNavLink<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>            <span class="token operator">&lt;</span>li<span class="token operator">></span>                <span class="token operator">&lt;</span>MyNavLink className<span class="token operator">=</span><span class="token string">"list-group-item "</span> to<span class="token operator">=</span><span class="token string">"/home/message"</span><span class="token operator">></span>Message<span class="token operator">&lt;</span><span class="token operator">/</span>MyNavLink<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span>        <span class="token punctuation">{</span><span class="token comment" spellcheck="true">/* 注册路由 */</span><span class="token punctuation">}</span>        <span class="token operator">&lt;</span>Switch<span class="token operator">></span>            <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">"/home/news"</span> component<span class="token operator">=</span><span class="token punctuation">{</span>News<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>            <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">"/home/message"</span> component<span class="token operator">=</span><span class="token punctuation">{</span>Message<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>Switch<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span></code></pre><p>在这里我们需要使用嵌套路由的方式，才能完成匹配</p><p>首先我们得 React 中路由得注册是有顺序得，我们在匹配得时候，因为 Home 组件是先注册得，因此在匹配的时候先去找 home 路由，由于是模糊匹配，会成功的匹配</p><p>在 Home 组件里面去匹配相应的路由，从而找到 /home/news 进行匹配，因此找到 News 组件，进行匹配渲染</p><blockquote><p>如果开启精确匹配的话，第一步的 <code>/home/news</code> 匹配 <code>/home</code> 就会卡住不动，这个时候就不会显示有用的东西了！</p></blockquote><h3 id="🍟-12-传递-params-参数"><a href="#🍟-12-传递-params-参数" class="headerlink" title="🍟 12. 传递 params 参数"></a>🍟 12. 传递 params 参数</h3><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/react-router-params.gif" alt="react-router-params"></p><p>首先我们需要实现的效果是，点击消息列表，展示出消息的详细内容</p><p>这个案例实现的方法有三种，第一种就是传递 params 参数，由于我们所显示的数据都是从数据集中取出来的，因此我们需要有数据的传输给 Detail 组件</p><p>我们首先需要将详细内容的数据列表，保存在 DetailData 中，将消息列表保存在 Message 的 state 中。</p><p>我们可以通过将数据拼接在路由地址末尾来实现数据的传递</p><pre class=" language-js"><code class="language-js"> <span class="token operator">&lt;</span>Link to<span class="token operator">=</span><span class="token punctuation">{</span><span class="token template-string"><span class="token string">`/home/message/detail/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>msgObj<span class="token punctuation">.</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>msgObj<span class="token punctuation">.</span>title<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">}</span><span class="token operator">></span><span class="token punctuation">{</span>msgObj<span class="token punctuation">.</span>title<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>Link<span class="token operator">></span></code></pre><p>如上，我们将消息列表的 id 和 title 写在了路由地址后面</p><blockquote><p>这里我们需要注意的是：需要采用模板字符串以及 <code>$</code> 符的方式来进行数据的获取</p></blockquote><p>在注册路由时，我们可以通过 <code>:数据名</code> 来接收数据</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">"/home/message/detail/:id/:title"</span> component<span class="token operator">=</span><span class="token punctuation">{</span>Detail<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span></code></pre><p>如上，使用了 <code>:id/:title</code> 成功的接收了由 Link 传递过来的 id 和 title 数据</p><p>这样我们既成功的实现了路由的跳转，又将需要获取的数据传递给了 Detail 组件</p><p>我们在 Detail 组件中打印 <code>this.props</code> 来查看当前接收的数据情况</p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/image-20210906153042353.png" alt="image-20210906153042353"></p><p>我们可以发现，我们传递的数据被接收到了对象的 match 属性下的 params 中</p><p>因此我们可以在 Detail 组件中获取到又 Message 组件中传递来的 params 数据</p><p>并通过 params 数据中的 <code>id</code> 值，在详细内容的数据集中查找出指定 <code>id</code> 的详细内容</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> <span class="token punctuation">{</span> id<span class="token punctuation">,</span> title <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>match<span class="token punctuation">.</span>params<span class="token keyword">const</span> findResult <span class="token operator">=</span> DetailData<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">(</span>detailObj<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> detailObj<span class="token punctuation">.</span>id <span class="token operator">===</span> id<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>最后渲染数据即可</p><h3 id="🍀-13-传递-search-参数"><a href="#🍀-13-传递-search-参数" class="headerlink" title="🍀 13. 传递 search 参数"></a>🍀 13. 传递 search 参数</h3><p>我们还可以采用传递 search 参数的方法来实现</p><p>首先我们先确定数据传输的方式</p><p>我们先在 Link 中采用 <code>?</code> 符号的方式来表示后面的为可用数据</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>Link to<span class="token operator">=</span><span class="token punctuation">{</span><span class="token template-string"><span class="token string">`/home/message/detail/?id=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>msgObj<span class="token punctuation">.</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&amp;title=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>msgObj<span class="token punctuation">.</span>title<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">}</span><span class="token operator">></span><span class="token punctuation">{</span>msgObj<span class="token punctuation">.</span>title<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>Link<span class="token operator">></span></code></pre><p>采用 <code>search</code> 传递的方式，无需在 Route 中再次声明，可以在 Detail 组件中直接获取到</p><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/image-20210906155217647.png" alt="image-20210906155217647"></p><p>我们可以发现，我们的数据保存在了 <code>location</code> 对象下的 <code>search</code> 中，是一种字符串的形式保存的，我们可以引用一个库来进行转化 <code>querystring</code></p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> qs <span class="token keyword">from</span> <span class="token string">'querystring'</span></code></pre><p>这个库是 React 中自带有的，它有两个方法，一个是 <code>parse</code> 一个是 <code>stringify</code> </p><p>我们可以采用 <code>parse</code> 方法，将字符串转化为键值对形式的对象</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> <span class="token punctuation">{</span> search <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>location<span class="token keyword">const</span> <span class="token punctuation">{</span> id<span class="token punctuation">,</span> title <span class="token punctuation">}</span> <span class="token operator">=</span> qs<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>search<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>这样我们就能成功的获取数据，并进行渲染</p><blockquote><p>tips：无需声明接收</p></blockquote><h3 id="🌷-14-传递-state-参数"><a href="#🌷-14-传递-state-参数" class="headerlink" title="🌷 14. 传递 state 参数"></a>🌷 14. 传递 state 参数</h3><p>采用传递 state 参数的方法，是我觉得最完美的一种方法，因为它不会将数据携带到地址栏上，采用内部的状态来维护</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>Link to<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> pathname<span class="token punctuation">:</span> <span class="token string">'/home/message/detail'</span><span class="token punctuation">,</span> state<span class="token punctuation">:</span> <span class="token punctuation">{</span> id<span class="token punctuation">:</span> msgObj<span class="token punctuation">.</span>id<span class="token punctuation">,</span> title<span class="token punctuation">:</span> msgObj<span class="token punctuation">.</span>title <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">></span><span class="token punctuation">{</span>msgObj<span class="token punctuation">.</span>title<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>Link<span class="token operator">></span></code></pre><p>首先，我们需要在 Link 中注册跳转时，传递一个路由对象，包括一个 跳转地址名，一个 state 数据，这样我们就可以在 Detail 组件中获取到这个传递的 state 数据</p><blockquote><p>注意：采用这种方式传递，无需声明接收</p></blockquote><p>我们可以在 Detail 组件中的 location 对象下的 state 中取出我们所传递的数据</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> <span class="token punctuation">{</span> id<span class="token punctuation">,</span> title <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>location<span class="token punctuation">.</span>state</code></pre><p><img src="https://ljcimg.oss-cn-beijing.aliyuncs.com/img/image-20210906160940033.png" alt="image-20210906160940033"></p><p>直接使用即可~</p><p>解决清除缓存造成报错的问题，我们可以在获取不到数据的时候用空对象来替代，例如，</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> <span class="token punctuation">{</span> id<span class="token punctuation">,</span> title <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>location<span class="token punctuation">.</span>state <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>当获取不到 <code>state</code> 时，则用空对象代替</p><blockquote><p>这里的 state 和状态里的 state 有所不同</p></blockquote><h3 id="15-withRouter"><a href="#15-withRouter" class="headerlink" title="15.withRouter"></a>15.withRouter</h3><ul><li><p>它不是一个组件是一个函数    </p></li><li><p>是用来给一般组件使用路由组件的api的、</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//导入</span><span class="token keyword">import</span> <span class="token punctuation">{</span> withRouter <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react-router-dom'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//类式组件</span><span class="token keyword">class</span> <span class="token class-name">Header</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//导出</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">withRouter</span><span class="token punctuation">(</span>Header<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//这样在这个组件内部就有了路由组件的相关api了，不影响自己props组件实例参数的接收</span></code></pre></li></ul><h3 id="16-BrowserRouter-和-HashRouter-的区别"><a href="#16-BrowserRouter-和-HashRouter-的区别" class="headerlink" title="16.BrowserRouter 和 HashRouter 的区别"></a>16.BrowserRouter 和 HashRouter 的区别</h3><ul><li><p><strong>底层的实现原理不一样</strong></p><pre class=" language-js"><code class="language-js">对于 BrowserRouter 来说它使用的是 React 为它封装的 history API ，这里的 history 和浏览器中的 history 有所不同噢！通过操作这些 API 来实现路由的保存等操作，但是这些 API 是 H5 中提出的，因此不兼容 IE9 以下版本。对于 HashRouter 而言，它实现的原理是通过 URL 的哈希值，但是这句话我不是很理解，用一个简单的解释就是我们可以理解为是锚点跳转，因为锚点跳转会保存历史记录，从而让 HashRouter 有了相关的前进后退操作，HashRouter 不会将 <span class="token template-string"><span class="token string">`#`</span></span> 符号后面的内容请求。兼容性更好！</code></pre></li><li><p><strong>地址栏的表现形式不一样</strong></p><p>​    HashRouter 的路径中包含 <code>#</code> ，例如 <code>localhost:3000/#/demo/test</code></p></li><li><p><strong>刷新后state参数改变</strong></p></li></ul><p>​       在BrowserRouter 中，state 保存在history 对象中，刷新不会丢失</p><p>​       HashRouter 则刷新会丢失 state</p>]]></content>
      
      
      <categories>
          
          <category> react </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> learning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/01/24/hello-world/"/>
      <url>/2022/01/24/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> react </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> learning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello React day1</title>
      <link href="/2022/01/24/hello-react/"/>
      <url>/2022/01/24/hello-react/</url>
      
        <content type="html"><![CDATA[<p>学习React基础的第一天 </p><h2 id="Day-one"><a href="#Day-one" class="headerlink" title="Day one"></a>Day one</h2><h3 id="PubSubJs-消息的发布与订阅"><a href="#PubSubJs-消息的发布与订阅" class="headerlink" title="PubSubJs(消息的发布与订阅)"></a>PubSubJs(消息的发布与订阅)</h3><pre class=" language-javascript"><code class="language-javascript">安装： npm install pubsub<span class="token operator">-</span>js使用： <span class="token keyword">import</span> PubSub <span class="token keyword">from</span> <span class="token string">'pubsub-js'</span><span class="token comment" spellcheck="true">//注意这里的callback接收的第一个参数为订阅的消息名！！！</span>订阅： <span class="token keyword">let</span> token <span class="token operator">=</span> PubSub<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token string">'MY TOPIC'</span><span class="token punctuation">,</span> callback<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//第一个参数为消息名，后面参数为传递的值</span>发布： PubSub<span class="token punctuation">.</span><span class="token function">publish</span><span class="token punctuation">(</span><span class="token string">'MY TOPIC'</span><span class="token punctuation">,</span> <span class="token string">'hello world!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//取消类似定时器的取消</span>取消： PubSub<span class="token punctuation">.</span><span class="token function">unsubscribe</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="fetch的基本用法-优化写法"><a href="#fetch的基本用法-优化写法" class="headerlink" title="fetch的基本用法(优化写法)"></a>fetch的基本用法(优化写法)</h3><pre class=" language-javascript"><code class="language-javascript">    <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`https://api.github.com/search/users?q=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span>              <span class="token comment" spellcheck="true">//返回的是一个Promise 通过await拿到结果是一个response对象</span>            <span class="token comment" spellcheck="true">//数据在这个对象的response.json()方法中，但是这个也是一个promise</span>            <span class="token comment" spellcheck="true">//再次使用await，这样得到的就是那个数据对象</span>            <span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token keyword">await</span> result<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span>               PubSub<span class="token punctuation">.</span><span class="token function">publish</span><span class="token punctuation">(</span><span class="token string">'changeState'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> mainValue<span class="token punctuation">:</span> data<span class="token punctuation">.</span>items<span class="token punctuation">,</span> loading<span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            PubSub<span class="token punctuation">.</span><span class="token function">publish</span><span class="token punctuation">(</span><span class="token string">'changeState'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> loading<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> err<span class="token punctuation">:</span> error<span class="token punctuation">.</span>message <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span></code></pre><ul><li>fetch原生函数（存在兼容性问题）与XmlHttpRequest属于同级</li><li>axios，jq中的$ajax都是基于xmlHttpRequest封装的</li></ul><h3 id="对象解构赋值"><a href="#对象解构赋值" class="headerlink" title="对象解构赋值"></a>对象解构赋值</h3><pre><code>let obj = {a:{b:123}cosnt {a} = obj  //普通解构cosnt {a:{b}} = obj // 深度解构cosnt {a:{b:value}} = obj  //深度解构加重命名</code></pre><h3 id="react-router-dom的基本使用"><a href="#react-router-dom的基本使用" class="headerlink" title="react-router-dom的基本使用"></a>react-router-dom的基本使用</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> Link<span class="token punctuation">,</span>Route<span class="token punctuation">,</span>Routes <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react-router-dom"</span><span class="token number">1</span><span class="token punctuation">.</span>明确好界面中的导航区、展示区<span class="token number">2</span><span class="token punctuation">.</span>导航区的a标签改为Link标签<span class="token operator">&lt;</span>Link className<span class="token operator">=</span><span class="token string">"xxxx"</span> to<span class="token operator">=</span><span class="token string">'/about'</span><span class="token operator">></span>yyyy<span class="token operator">&lt;</span><span class="token operator">/</span>Link<span class="token operator">></span><span class="token number">3</span><span class="token punctuation">.</span>展示区写Routes和Route标签进行路由的匹配<span class="token comment" spellcheck="true">//新版本写法</span><span class="token operator">&lt;</span>Routes<span class="token operator">></span>    <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">'/about'</span> element<span class="token operator">=</span><span class="token punctuation">{</span><span class="token operator">&lt;</span>About <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">'/home'</span> element<span class="token operator">=</span><span class="token punctuation">{</span><span class="token operator">&lt;</span>Home <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Routes<span class="token operator">></span><span class="token comment" spellcheck="true">//app.js </span><span class="token keyword">import</span> <span class="token punctuation">{</span>BrowserRouter <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react-router-dom"</span><span class="token number">4</span><span class="token punctuation">.</span>app的最外层包裹一个 <span class="token operator">&lt;</span>BrowserRouter<span class="token operator">></span> 或者<span class="token operator">&lt;</span>HashBrowser<span class="token operator">></span></code></pre><h3 id="路由组件与一般组件"><a href="#路由组件与一般组件" class="headerlink" title="路由组件与一般组件"></a>路由组件与一般组件</h3><p>​      1.写法不同</p><p>​             一般组件：<code>&lt;Demo /&gt;</code></p><p>​            路由组件：<code>&lt;Route path='/about' component={Demo} /&gt;</code></p><p>​      2.存放位置不同</p><p>​       一般组件：存放在components文件夹下</p><p>​            路由组件：存放在pages文件夹下    </p><p>​      3.接收到的props不同</p><p>​        一般组件：写标签时传入了什么，就接受到了什么</p><p>​        路由组件：接收到三个固定的属性</p><pre class=" language-javascript"><code class="language-javascript">history<span class="token punctuation">:</span>        go<span class="token punctuation">:</span> ƒ <span class="token function">go</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>        goBack<span class="token punctuation">:</span> ƒ <span class="token function">goBack</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        goForward<span class="token punctuation">:</span> ƒ <span class="token function">goForward</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        push<span class="token punctuation">:</span> ƒ <span class="token function">push</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> state<span class="token punctuation">)</span>        replace<span class="token punctuation">:</span> ƒ <span class="token function">replace</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> state<span class="token punctuation">)</span>location<span class="token punctuation">:</span>        pathname<span class="token punctuation">:</span> <span class="token string">"/about"</span>        search<span class="token punctuation">:</span> <span class="token string">""</span>        state<span class="token punctuation">:</span> undefinedmatch<span class="token punctuation">:</span>        params<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        path<span class="token punctuation">:</span> <span class="token string">"/about"</span>        url<span class="token punctuation">:</span> <span class="token string">"/about"</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> react </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> learning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>craco部分配置</title>
      <link href="/2022/01/24/craco-configuration-of-webpack/"/>
      <url>/2022/01/24/craco-configuration-of-webpack/</url>
      
        <content type="html"><![CDATA[<h2 id="star2-使用craco进行webpack的相关配置"><a href="#star2-使用craco进行webpack的相关配置" class="headerlink" title=":star2: 使用craco进行webpack的相关配置"></a><span class="github-emoji"><span>🌟</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f31f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 使用craco进行webpack的相关配置</h2><pre class=" language-dart"><code class="language-dart"> yarn add  <span class="token metadata symbol">@craco</span><span class="token operator">/</span>craco<span class="token comment" spellcheck="true">//或者</span> npm install  <span class="token metadata symbol">@craco</span><span class="token operator">/</span>craco <span class="token operator">--</span>save</code></pre><h2 id="pig2-在项目根目录新建craco-config-js文件"><a href="#pig2-在项目根目录新建craco-config-js文件" class="headerlink" title=":pig2:  在项目根目录新建craco.config.js文件"></a><span class="github-emoji"><span>🐖</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f416.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>  在项目根目录新建craco.config.js文件</h2><p>craco.config.js文件中进行相关配置</p><h2 id="smile-cat-修改package-json"><a href="#smile-cat-修改package-json" class="headerlink" title=":smile_cat: 修改package.json"></a><span class="github-emoji"><span>😸</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f638.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 修改package.json</h2><img src="https:////upload-images.jianshu.io/upload_images/15884256-f98082422a319e9d.png?imageMogr2/auto-orient/strip|imageView2/2/w/660/format/webp" alt="img" style="zoom:50%;"><p>image.png</p><pre class=" language-bash"><code class="language-bash"><span class="token string">"scripts"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>    <span class="token string">"start"</span><span class="token keyword">:</span> <span class="token string">"craco start"</span>,    <span class="token string">"build"</span><span class="token keyword">:</span> <span class="token string">"craco build"</span>,    <span class="token string">"test"</span><span class="token keyword">:</span> <span class="token string">"craco test"</span>,    <span class="token string">"eject"</span><span class="token keyword">:</span> <span class="token string">"react-scripts eject"</span>  <span class="token punctuation">}</span>,</code></pre><h2 id="wilted-flower-配置文件craco-config-js"><a href="#wilted-flower-配置文件craco-config-js" class="headerlink" title=":wilted_flower: 配置文件craco.config.js"></a><span class="github-emoji"><span>🥀</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f940.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 配置文件craco.config.js</h2><pre class=" language-cpp"><code class="language-cpp">npm install compression<span class="token operator">-</span>webpack<span class="token operator">-</span>plugin <span class="token operator">--</span>save <span class="token comment" spellcheck="true">//打包build生成gizp压缩文件</span>npm install webpack<span class="token operator">-</span>bundle<span class="token operator">-</span>analyzer <span class="token operator">--</span>save <span class="token comment" spellcheck="true">//分析打包后的文件体积</span></code></pre><h3 id="tiger-打包配置压缩文件"><a href="#tiger-打包配置压缩文件" class="headerlink" title=":tiger: 打包配置压缩文件"></a><span class="github-emoji"><span>🐯</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f42f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 打包配置压缩文件</h3><p>npm install compression-webpack-plugin –save //打包build生成gizp压缩文件</p><pre class=" language-tsx"><code class="language-tsx">const CompressionWebpackPlugin = require('compression-webpack-plugin');const webpack = require('webpack')module.exports = {    webpack: {        plugins: [            // 打压缩包            new CompressionWebpackPlugin({                algorithm: 'gzip',                test: new RegExp(                    '\\.(' +                    ['js', 'css'].join('|') +                    ')$'                ),                threshold: 1024,                minRatio: 0.8            }),            new webpack.IgnorePlugin(/^\.\/locale$/, /moment$/),    ]};</code></pre><p>⚠️compression-webpack-plugin 打包的文件生成 .gz后缀的文件需要服务器配置支持。</p><h3 id="watermelon-打包忽略console-debugger"><a href="#watermelon-打包忽略console-debugger" class="headerlink" title=":watermelon: 打包忽略console,debugger"></a><span class="github-emoji"><span>🍉</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f349.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 打包忽略console,debugger</h3><p>npm install uglifyjs-webpack-plugin@1 –save-dev<br> （⚠️ 必须为1.0版本，否则打包报错）</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">const</span> UglifyJsPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'uglifyjs-webpack-plugin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'webpack'</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    webpack<span class="token punctuation">:</span> <span class="token punctuation">{</span>        plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>             <span class="token keyword">new</span> <span class="token class-name">UglifyJsPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                uglifyOptions<span class="token punctuation">:</span> <span class="token punctuation">{</span>                    compress<span class="token punctuation">:</span> <span class="token punctuation">{</span>                        warnings<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>                        drop_debugger<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                        drop_console<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                    <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                sourceMap<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>                parallel<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h3 id="feet-antd的按需引入和自定义主题"><a href="#feet-antd的按需引入和自定义主题" class="headerlink" title=":feet: antd的按需引入和自定义主题"></a><span class="github-emoji"><span>🐾</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f43e.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> antd的按需引入和自定义主题</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//yarn add @babel/plugin-proposal-decorators --save -dev</span><span class="token comment" spellcheck="true">//yarn add craco-less</span><span class="token keyword">const</span> CracoLessPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'craco-less'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//样式的按需引入</span>    babel<span class="token punctuation">:</span> <span class="token punctuation">{</span>        plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">[</span><span class="token string">'import'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> libraryName<span class="token punctuation">:</span> <span class="token string">'antd'</span><span class="token punctuation">,</span> libraryDirectory<span class="token punctuation">:</span> <span class="token string">'es'</span><span class="token punctuation">,</span> style<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token punctuation">[</span><span class="token string">'@babel/plugin-proposal-decorators'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> legacy<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">]</span>        <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//配置自定义主题</span>    plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>            plugin<span class="token punctuation">:</span> CracoLessPlugin<span class="token punctuation">,</span>            options<span class="token punctuation">:</span> <span class="token punctuation">{</span>                lessLoaderOptions<span class="token punctuation">:</span> <span class="token punctuation">{</span>                    lessOptions<span class="token punctuation">:</span> <span class="token punctuation">{</span>                        modifyVars<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token string">'@primary-color'</span><span class="token punctuation">:</span> <span class="token string">'#1DA57A'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>                        javascriptEnabled<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                    <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h3 id="desktop-computer-配置别名"><a href="#desktop-computer-配置别名" class="headerlink" title=":desktop_computer: 配置别名"></a><span class="github-emoji"><span>🖥</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f5a5.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 配置别名</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//在craco.config,.js里加上</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  webpack<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 别名</span>    alias<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token string">"@"</span><span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"src"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token string">"@utils"</span><span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"src/utils"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre><h3 id="phone-配置代理"><a href="#phone-配置代理" class="headerlink" title=":phone: 配置代理"></a><span class="github-emoji"><span>☎</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/260e.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 配置代理</h3><pre class=" language-js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>        proxy<span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token string">'/api'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>                target<span class="token punctuation">:</span> <span class="token string">'http://localhost:8000'</span><span class="token punctuation">,</span>                changeOrigin<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                pathRewrite<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">"^/api"</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// tailwindcss 的相关配置，如果没有使用到可以去掉</span>    style<span class="token punctuation">:</span> <span class="token punctuation">{</span>        postcss<span class="token punctuation">:</span> <span class="token punctuation">{</span>            plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>                <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'tailwindcss'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'autoprefixer'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span></code></pre><h3 id="maple-leaf-查看打包分析明细"><a href="#maple-leaf-查看打包分析明细" class="headerlink" title=":maple_leaf: 查看打包分析明细"></a><span class="github-emoji"><span>🍁</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f341.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 查看打包分析明细</h3><p><strong>npm i webpack-bundle-analyzer –save -dev</strong></p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">const</span> <span class="token punctuation">{</span> BundleAnalyzerPlugin <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"webpack-bundle-analyzer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'webpack'</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    webpack<span class="token punctuation">:</span> <span class="token punctuation">{</span>        plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>            <span class="token comment" spellcheck="true">//打包分析</span>            <span class="token keyword">new</span> <span class="token class-name">BundleAnalyzerPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>⚠️：生产版本关闭此项</p><h3 id="houses-查看打包的进度"><a href="#houses-查看打包的进度" class="headerlink" title=":houses: 查看打包的进度"></a><span class="github-emoji"><span>🏘</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3d8.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 查看打包的进度</h3><p>npm install simple-progress-webpack-plugin –save -dev</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'webpack'</span><span class="token punctuation">)</span><span class="token keyword">const</span> SimpleProgressWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span> <span class="token string">'simple-progress-webpack-plugin'</span> <span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    webpack<span class="token punctuation">:</span> <span class="token punctuation">{</span>        plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>            <span class="token keyword">new</span> <span class="token class-name">SimpleProgressWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>              <span class="token punctuation">]</span><span class="token punctuation">,</span>        babel<span class="token punctuation">:</span> <span class="token punctuation">{</span>        plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">[</span><span class="token string">'import'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> libraryName<span class="token punctuation">:</span> <span class="token string">'antd'</span><span class="token punctuation">,</span> libraryDirectory<span class="token punctuation">:</span> <span class="token string">'es'</span><span class="token punctuation">,</span> style<span class="token punctuation">:</span> <span class="token string">'css'</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token punctuation">[</span><span class="token string">'@babel/plugin-proposal-decorators'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> legacy<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">]</span>        <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>            plugin<span class="token punctuation">:</span> <span class="token function">CracoVtkPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h3 id="happy-完整配置"><a href="#happy-完整配置" class="headerlink" title=":happy: 完整配置"></a>:happy: 完整配置</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> CracoVtkPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"craco-vtk"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// const { BundleAnalyzerPlugin } = require("webpack-bundle-analyzer");</span><span class="token keyword">const</span> CompressionWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'compression-webpack-plugin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> UglifyJsPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'uglifyjs-webpack-plugin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> SimpleProgressWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span> <span class="token string">'simple-progress-webpack-plugin'</span> <span class="token punctuation">)</span><span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'webpack'</span><span class="token punctuation">)</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    webpack<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 别名</span>        alias<span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token string">"@"</span><span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"src"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>            <span class="token comment" spellcheck="true">//打包分析</span>            <span class="token comment" spellcheck="true">// new BundleAnalyzerPlugin(),</span>            <span class="token comment" spellcheck="true">// 打压缩包</span>            <span class="token keyword">new</span> <span class="token class-name">CompressionWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                algorithm<span class="token punctuation">:</span> <span class="token string">'gzip'</span><span class="token punctuation">,</span>                test<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span>                    <span class="token string">'\\.('</span> <span class="token operator">+</span>                    <span class="token punctuation">[</span><span class="token string">'js'</span><span class="token punctuation">,</span> <span class="token string">'css'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'|'</span><span class="token punctuation">)</span> <span class="token operator">+</span>                    <span class="token string">')$'</span>                <span class="token punctuation">)</span><span class="token punctuation">,</span>                threshold<span class="token punctuation">:</span> <span class="token number">1024</span><span class="token punctuation">,</span>                minRatio<span class="token punctuation">:</span> <span class="token number">0.8</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">//</span>            <span class="token keyword">new</span> <span class="token class-name">UglifyJsPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                uglifyOptions<span class="token punctuation">:</span> <span class="token punctuation">{</span>                    compress<span class="token punctuation">:</span> <span class="token punctuation">{</span>                        warnings<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>                        drop_debugger<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                        drop_console<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                    <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                sourceMap<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>                parallel<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>IgnorePlugin</span><span class="token punctuation">(</span><span class="token regex">/^\.\/locale$/</span><span class="token punctuation">,</span> <span class="token regex">/moment$/</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">SimpleProgressWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">//抽离公用模块</span>        optimization<span class="token punctuation">:</span> <span class="token punctuation">{</span>            splitChunks<span class="token punctuation">:</span> <span class="token punctuation">{</span>                cacheGroups<span class="token punctuation">:</span> <span class="token punctuation">{</span>                    commons<span class="token punctuation">:</span> <span class="token punctuation">{</span>                        chunks<span class="token punctuation">:</span> <span class="token string">'initial'</span><span class="token punctuation">,</span>                        minChunks<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> maxInitialRequests<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span>                        minSize<span class="token punctuation">:</span> <span class="token number">0</span>                    <span class="token punctuation">}</span><span class="token punctuation">,</span>                    vendor<span class="token punctuation">:</span> <span class="token punctuation">{</span>                        test<span class="token punctuation">:</span> <span class="token regex">/node_modules/</span><span class="token punctuation">,</span>                        chunks<span class="token punctuation">:</span> <span class="token string">'initial'</span><span class="token punctuation">,</span>                        name<span class="token punctuation">:</span> <span class="token string">'vendor'</span><span class="token punctuation">,</span>                        priority<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span>                        enforce<span class="token punctuation">:</span> <span class="token boolean">true</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    babel<span class="token punctuation">:</span> <span class="token punctuation">{</span>        plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">[</span><span class="token string">'import'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> libraryName<span class="token punctuation">:</span> <span class="token string">'antd'</span><span class="token punctuation">,</span> libraryDirectory<span class="token punctuation">:</span> <span class="token string">'es'</span><span class="token punctuation">,</span> style<span class="token punctuation">:</span> <span class="token string">'css'</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token punctuation">[</span><span class="token string">'@babel/plugin-proposal-decorators'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> legacy<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">]</span>        <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>            plugin<span class="token punctuation">:</span> <span class="token function">CracoVtkPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> craco </category>
          
      </categories>
      
      
        <tags>
            
            <tag> craco </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
